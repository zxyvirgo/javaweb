package com.demo.hibernate;
import com.demo.hibernate.Item;
import java.util.List;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import org.springframework.context.ApplicationContext;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

/**
 * A data access object (DAO) providing persistence and search support for Item
 * entities. Transaction control of the save(), update() and delete() operations
 * can directly support Spring container-managed transactions or they can be
 * augmented to handle user-managed Spring transactions. Each of these methods
 * provides additional information for how to configure it for the desired type
 * of transaction control.
 * 
 * @see com.demo.Hibernate.Item
 * @author MyEclipse Persistence Tools
 */

public class ItemDAO extends HibernateDaoSupport {
//	private static final Logger log = LoggerFactory.getLogger(ItemDAO.class);
	// property constants
	public static final String NAME = "name";
	public static final String PRICE = "price";
	public static final String DESCRIPTION = "description";

	protected void initDao() {
		// do nothing
	}

	public void save(Item transientInstance) {
	//	log.debug("saving Item instance");
		Session session = getSession();
		Transaction tx = null;
		//System.out.println("saving Item instance");
		try {
			tx = session.beginTransaction();
			//getSession().save(transientInstance);
			//getHibernateTemplate().save(transientInstance);
			session.save(transientInstance);
			//log.debug("save successful");
			tx.commit();
			System.out.println("save successful");
		} catch (RuntimeException re) {
			//log.error("save failed", re);
			 if (tx != null) tx.rollback();
			System.out.println("save failed");
			throw re;
		}finally{
			session.close();
		}
	}

	public void delete(Item persistentInstance) {
	//	log.debug("deleting Item instance");
		Session session = getSession();
		Transaction tx = null;
		try {
			//getHibernateTemplate().delete(persistentInstance);
			tx = session.beginTransaction();
			session.delete(persistentInstance);
			tx.commit();
	//		log.debug("delete successful");
		} catch (RuntimeException re) {
	//		log.error("delete failed", re);
			if (tx != null) tx.rollback();
			throw re;
		}finally{
			session.close();
		}
	}

	
/*	public void update(Item persistentInstance) {
		log.debug("updating Item instance");
		Session session = getSession();
		Transaction tx = null;
		try {
			//getHibernateTemplate().delete(persistentInstance);
			tx = session.beginTransaction();
			session.update(persistentInstance);
			tx.commit();
			log.debug("update successful");
		} catch (RuntimeException re) {
			log.error("update failed", re);
			if (tx != null) tx.rollback();
			throw re;
		}finally{
			session.close();
		}
	}*/
	
/*	public Item findById(java.lang.Integer id) {
	//	log.debug("getting Item instance with id: " + id);
		try {
			Item instance = (Item) getHibernateTemplate().get(
					"com.demo.Hibernate.Item", id);
			return instance;
		} catch (RuntimeException re) {
	//		log.error("get failed", re);
			throw re;
		}
	}*/

	public Item findById(java.lang.Integer id) {
		//	log.debug("getting Item instance with id: " + id);
			try {
				Item instance = (Item) getHibernateTemplate().get(
						Item.class.getName(), id);
				return instance;
			} catch (RuntimeException re) {
		//		log.error("get failed", re);
				throw re;
			}
		}
	
	public Item getItem(String  id) {
		//	log.debug("getting Item instance with id: " + id);
		Session session = getSession();
		Transaction tx = null;
		Item item = null;
			try {
				tx = session.beginTransaction();
			    Query query = session.createQuery("from item where ID=?");
			    query.setString(0, id.trim());
			    item = (Item)query.uniqueResult();
			    query = null;
			    tx.commit();
			//	return instance;
			} catch (RuntimeException re) {
		//		log.error("get failed", re);
				throw re;
			}finally{
				if(tx!=null){
					tx.rollback();
				}
				session.close();
			}
			return item;
		}
	

	@SuppressWarnings("unchecked")
	public List findByExample(Item instance) {
	//	log.debug("finding Item instance by example");
		try {
			List results = getHibernateTemplate().findByExample(instance);
	//		log.debug("find by example successful, result size: "
		//			+ results.size());
			return results;
		} catch (RuntimeException re) {
	//		log.error("find by example failed", re);
			throw re;
		}
	}

	@SuppressWarnings("unchecked")
	public List findByProperty(String propertyName, Object value) {
	//	log.debug("finding Item instance with property: " + propertyName
//				+ ", value: " + value);
		try {
			String queryString = "from Item as model where model."
					+ propertyName + "= ?";
			return getHibernateTemplate().find(queryString, value);
		} catch (RuntimeException re) {
	//		log.error("find by property name failed", re);
			throw re;
		}
	}

	@SuppressWarnings("unchecked")
	public List findByName(Object name) {
		return findByProperty(NAME, name);
	}

	@SuppressWarnings("unchecked")
	public List findByPrice(Object price) {
		return findByProperty(PRICE, price);
	}

	@SuppressWarnings("unchecked")
	public List findByDescription(Object description) {
		return findByProperty(DESCRIPTION, description);
	}

	@SuppressWarnings("unchecked")
	public List findAll() {
	//	log.debug("finding all Item instances");
		try {
			String queryString = "from Item";
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
	//		log.error("find all failed", re);
			throw re;
		}
	}

	public Item merge(Item detachedInstance) {
	//	log.debug("merging Item instance");
		try {
			Item result = (Item) getHibernateTemplate().merge(detachedInstance);
	//		log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
	//		log.error("merge failed", re);
			throw re;
		}
	}

	public void attachDirty(Item instance) {
	//	log.debug("attaching dirty Item instance");
		try {
			getHibernateTemplate().saveOrUpdate(instance);
	//		log.debug("attach successful");
		} catch (RuntimeException re) {
	//		log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(Item instance) {
	//	log.debug("attaching clean Item instance");
		try {
			getHibernateTemplate().lock(instance, LockMode.NONE);
	//		log.debug("attach successful");
		} catch (RuntimeException re) {
	//		log.error("attach failed", re);
			throw re;
		}
	}

	public static ItemDAO getFromApplicationContext(ApplicationContext ctx) {
		return (ItemDAO) ctx.getBean("ItemDAO");
	}
}